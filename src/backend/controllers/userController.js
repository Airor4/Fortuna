// @flow strict
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');


// User Model
const User = require('../../models/userModel');

// Throws an error if this isn't here because of async functions
const regeneratorRuntime = require("regenerator-runtime");
const jwtSecret = 'change this at deployment';


// Flowtype import
import type {
    $Request,
    $Response,
    NextFunction,
    Middleware,
  } from 'express';

exports.register = async (req: $Request, res: $Response) => {
    
        // Makes sure the signup is valid
        const errors = validationResult(req);

        if(!errors.isEmpty()){
                // 400 is a bad request
                return res
                    .status(400)
                    .json({ errors: errors.array() });
        }

        // Assigns request body to user schema fields
        const { userName, email, password } = req.body;

        try{
            // See if User already exists
            let user = await User.findOne({ userName });
            if(user != null){
                return res
                    .status(400)
                    .json({ errors: [ {msg: 'User already exists' }] });
            }

            // Instantiate a new user
            user = new User({
                userName,
                email,
                password
            });

            // Creates salt with 10 rounds(recommended)
            const salt = await bcrypt.genSalt(10);

            // bcyrpt hash passwords
            user.password = await bcrypt.hash(password, salt);

            // Save to MongoDB
            await user.save();

            const payload = {
                user: {
                    // Primary key id generated by Mongo
                    id: user.id
                }
            }

            // Need to manage the config path so that the jwttoken is not here see require('config')
            // expiresIn 4 hrs
            jwt.sign(payload, jwtSecret, 
            { expiresIn: 14400},
            (err: Error, token: jwt) => {
                if(err != null) throw err;
                res.json({ token });
            });
        } catch(err) {
            console.error(err.message);
            res.status(500).json({ msg: 'Server Error'});
        }
}

exports.login = async (req: $Request, res: $Response) => {
    // Makes sure the signup is valid
    const errors = validationResult(req);
    if(!errors.isEmpty()){
        // 400 is a bad request
        return res
            .status(400)
            .json({ errors: errors.array() });
    }

    // Assigns request body to user schema fields
    const { userName, password } = req.body;

    try{
        // See if User exists - might change this to const
        const user = await User.findOne({ userName });
        if(user == null){
            return res
                .status(400)
                .json({ errors: [ {msg: 'Invalid Credentials' }] });
        }

        // Checks if the plaintext password matches the hashed pass form db
        const isMatch = await bcrypt.compare(password, user.password);

        // If the credentials dont match it will return a boolean false
        if(!isMatch) {
            return res
                .status(400)
                .json({ errors: [ { msg: 'Invalid Credentials' }] });
        }


        const payload = {
            user: {
                // Primary key id generated by Mongo
                id: user.id
            }
        }

        // expiresIn 4 hour 
        jwt.sign(payload, jwtSecret, 
        { expiresIn: 14400},
        (err: Error, token: jwt) => {
            if(err) throw err;
            res.json({ token });
        });
    } catch(err) {
        console.error(err.message);
        res.status(500).json({ msg:'Server error'});
    }

}

exports.getUser = async (req: $Request, res: $Response) => {
    try{
        // Find the user using the id and dont return the password field
        const user = await User.findById(req.user.id).select('-password');
        res.json(user);
    } catch(err) {
        console.error(err.message);
        // res.status just gives the status of the call
        res.status(500).json({msg: 'Unable to find user'});
    }
}

exports.retrieveUser  = async (req: $Request, res: $Response) => {
    await User.findById(req.params.userId, '-password', function(err: Error, user: User){
        if(err)
        {
            res.send(err);
            console.error(err.message);
        }
        else
            res.send(user)
    });
}

exports.getLeaders = async (req: $Request, res: $Response) => {
    // skip and limit determine how many to return
    // the -1 in the sort is for descending order based on elo
    await User.find({}, ['userName', 'stats.elo'], { skip: 0, limit: 10, sort:{'stats.elo': -1} }, function(err: Error, leaders: Array<User>){
        if(err){
            res.send(err);
            console.error(err.message);
        }
        else
            res.send(leaders);
    });
}

exports.allUsers = async (req: $Request, res: $Response) => {
    await User.find({}, '-password', function(err: Error, users: Array<User>){
        if(err){
            res.send(err);
            console.error(err.message);
        }
        else
            res.send(users);
    });
}


// FOOT NOTE: this controller uses a try-catch approach to querying as opposed to tankController.js which uses callbacks.
// They in essence serve the same purpose.

