"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// Keeping this file for reference wont actually use any of these routes
var express = require('express');

var router = express.Router();

var bcrypt = require('bcrypt');

var jwt = require('jsonwebtoken');

var _require = require('express-validator'),
    check = _require.check,
    validationResult = _require.validationResult; // Contains jwtSecret
// User Model


var User = require('../../../models/userModel');

// TYPE: POST
// @DESC Register a new User
router.post('/', [check('userName', 'Please enter a username with 3 or more characters').isLength(3), check('password', 'Please enter a password with 5 or more characters').isLength({
  min: 5
})],
/*#__PURE__*/
// req: application/json
// res: JSON or error message or both
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(req, res) {
    var errors, _req$body, userName, password, user, salt, payload;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // Makes sure the signup is valid
            errors = validationResult(req);

            if (errors.isEmpty()) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", res.status(400).json({
              errors: errors.array()
            }));

          case 3:
            // Assigns request body to user schema fields
            _req$body = req.body, userName = _req$body.userName, password = _req$body.password;
            _context.prev = 4;
            _context.next = 7;
            return User.findOne({
              userName: userName
            });

          case 7:
            user = _context.sent;

            if (!(user != null)) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return", res.status(400).json({
              errors: [{
                msg: 'User already exists'
              }]
            }));

          case 10:
            // Instantiate a new user
            user = new User({
              userName: userName,
              password: password
            }); // Creates salt with 10 rounds(recommended)

            _context.next = 13;
            return bcrypt.genSalt(10);

          case 13:
            salt = _context.sent;
            _context.next = 16;
            return bcrypt.hash(password, salt);

          case 16:
            user.password = _context.sent;
            _context.next = 19;
            return user.save();

          case 19:
            payload = {
              user: {
                // Primary key id generated by Mongo
                id: user.id
              }
            }; // Need to manage the config path so that the jwttoken is not here see require('config')
            // expiresIn 4 hrs

            jwt.sign(payload, 'hide this at production', {
              expiresIn: 14400
            }, function (err, token) {
              if (err != null) throw err;
              res.json({
                token: token
              });
            });
            _context.next = 27;
            break;

          case 23:
            _context.prev = 23;
            _context.t0 = _context["catch"](4);
            console.error(_context.t0.message);
            res.status(500).json({
              msg: 'Server Error'
            });

          case 27:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 23]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
module.exports = router;