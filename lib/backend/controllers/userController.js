"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var bcrypt = require('bcrypt');

var jwt = require('jsonwebtoken');

var _require = require('express-validator'),
    validationResult = _require.validationResult; // Contains jwtSecret
// User Model


var User = require('../../models/userModel');

exports.register =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(req, res) {
    var errors, _req$body, userName, email, password, user, salt, payload;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // Makes sure the signup is valid
            errors = validationResult(req);

            if (errors.isEmpty()) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", res.status(400).json({
              errors: errors.array()
            }));

          case 3:
            // Assigns request body to user schema fields
            _req$body = req.body, userName = _req$body.userName, email = _req$body.email, password = _req$body.password;
            _context.prev = 4;
            _context.next = 7;
            return User.findOne({
              userName: userName
            });

          case 7:
            user = _context.sent;

            if (!(user != null)) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return", res.status(400).json({
              errors: [{
                msg: 'User already exists'
              }]
            }));

          case 10:
            // Instantiate a new user
            user = new User({
              userName: userName,
              email: email,
              password: password
            }); // Creates salt with 10 rounds(recommended)

            _context.next = 13;
            return bcrypt.genSalt(10);

          case 13:
            salt = _context.sent;
            _context.next = 16;
            return bcrypt.hash(password, salt);

          case 16:
            user.password = _context.sent;
            _context.next = 19;
            return user.save();

          case 19:
            payload = {
              user: {
                // Primary key id generated by Mongo
                id: user.id
              }
            }; // Need to manage the config path so that the jwttoken is not here see require('config')
            // expiresIn 4 hrs

            jwt.sign(payload, process.env.SECRET, {
              expiresIn: 14400
            }, function (err, token) {
              if (err != null) throw err;
              res.json({
                token: token
              });
            });
            _context.next = 27;
            break;

          case 23:
            _context.prev = 23;
            _context.t0 = _context["catch"](4);
            console.error(_context.t0.message);
            res.status(500).json({
              msg: 'Server Error'
            });

          case 27:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 23]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.login =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(req, res) {
    var errors, _req$body2, userName, password, user, isMatch, payload;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // Makes sure the signup is valid
            errors = validationResult(req);

            if (errors.isEmpty()) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", res.status(400).json({
              errors: errors.array()
            }));

          case 3:
            // Assigns request body to user schema fields
            _req$body2 = req.body, userName = _req$body2.userName, password = _req$body2.password;
            _context2.prev = 4;
            _context2.next = 7;
            return User.findOne({
              userName: userName
            });

          case 7:
            user = _context2.sent;

            if (!(user == null)) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt("return", res.status(400).json({
              errors: [{
                msg: 'Invalid Credentials'
              }]
            }));

          case 10:
            _context2.next = 12;
            return bcrypt.compare(password, user.password);

          case 12:
            isMatch = _context2.sent;

            if (isMatch) {
              _context2.next = 15;
              break;
            }

            return _context2.abrupt("return", res.status(400).json({
              errors: [{
                msg: 'Invalid Credentials'
              }]
            }));

          case 15:
            payload = {
              user: {
                // Primary key id generated by Mongo
                id: user.id
              }
            }; // expiresIn 4 hour 

            jwt.sign(payload, process.env.SECRET, {
              expiresIn: 14400
            }, function (err, token) {
              if (err) throw err;
              res.json({
                token: token
              });
            });
            _context2.next = 23;
            break;

          case 19:
            _context2.prev = 19;
            _context2.t0 = _context2["catch"](4);
            console.error(_context2.t0.message);
            res.status(500).json({
              msg: 'Server error'
            });

          case 23:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[4, 19]]);
  }));

  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

exports.getUser =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(req, res) {
    var user;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return User.findById(req.params.userId);

          case 3:
            user = _context3.sent;
            res.json(user);
            _context3.next = 11;
            break;

          case 7:
            _context3.prev = 7;
            _context3.t0 = _context3["catch"](0);
            console.error(_context3.t0.message);
            res.status(500).json({
              msg: 'Server Error'
            });

          case 11:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[0, 7]]);
  }));

  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
/*exports.updateCassus = async (req: $Request, res: $Response){
    try{
        const user = await User.findById(req.params.userId);
        const { andBlocks, forBlocks, ifBlocks, ifElseBlocks, intEqualsBlocks, intGreaterThanBlocks, intLessThanBlocks, orBlocks, setVariableBlocks, variableBlocks, whileBlocks } = req.body;

    }
    catch(err){

    }
}*/


exports.checkAuth =
/*#__PURE__*/
function () {
  var _ref4 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee4(req, res) {
    var user;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.next = 3;
            return User.findById(req.userId).select('-password');

          case 3:
            user = _context4.sent;
            res.json(user);
            _context4.next = 11;
            break;

          case 7:
            _context4.prev = 7;
            _context4.t0 = _context4["catch"](0);
            console.error(_context4.t0.message);
            res.status(500).json({
              msg: 'Server Error'
            });

          case 11:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[0, 7]]);
  }));

  return function (_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}(); //exports.retrieveAll