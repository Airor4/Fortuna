// @flow strict
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');
// Contains jwtSecret


// User Model
const User = require('../../models/userModel');


import type {
    $Request,
    $Response,
    NextFunction,
    Middleware,
  } from 'express';

exports.register = async (req: $Request, res: $Response) => {
    
        // Makes sure the signup is valid
        const errors = validationResult(req);

        if(!errors.isEmpty()){
                // 400 is a bad request
                return res
                    .status(400)
                    .json({ errors: errors.array() });
        }

        // Assigns request body to user schema fields
        const { userName, password } = req.body;

        try{
            // See if User already exists
            let user = await User.findOne({ userName });
            if(user != null){
                return res
                    .status(400)
                    .json({ errors: [ {msg: 'User already exists' }] });
            }

            // Instantiate a new user
            user = new User({
                userName,
                password
            });

            // Creates salt with 10 rounds(recommended)
            const salt = await bcrypt.genSalt(10);

            // bcyrpt hash passwords
            user.password = await bcrypt.hash(password, salt);

            // Save to MongoDB
            await user.save();

            const payload = {
                user: {
                    // Primary key id generated by Mongo
                    id: user.id
                }
            }

            // Need to manage the config path so that the jwttoken is not here see require('config')
            // expiresIn 4 hrs
            jwt.sign(payload, 'hide this at production', 
            { expiresIn: 14400},
            (err, token) => {
                if(err != null) throw err;
                res.json({ token });
            });
        } catch(err) {
            console.error(err.message);
            res.status(500).json({ msg: 'Server Error'});
        }
}

exports.test = function(req, res){
    res.send({msg: req.params.userId});
};
//exports.retrieveAll