//@flow strict

const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { check, validationResult } = require('express-validator');
// Contains jwtSecret
const config = require('config');



// User Model
const User = require('../../../models/userModel');

// Get the signup page
router.get('/',(req, res) => {
    res.status(200).send('Welcome to the login page')
})

// Register a new User
router.post('/', [
    check('userName', 'Please enter a username with 3 or more characters')
        .isLength(3),
    check('password', 'Please enter a password with 5 or more characters')
        .isLength({ min: 5})
    ], 
    async (req, res) => {
        // Makes sure the signup is valid
        const errors = validationResult(req);
        if(!errors.isEmpty()){
            // 400 is a bad request
            return res
                .status(400)
                .json({ errors: errors.array() });
        }

    // Assigns request body to user schema fields
    const { userName, password } = req.body;

    try{
        // See if User already exists
        let user = await User.findOne({ userName });
        if(user){
            return res
                .status(400)
                .json({ errors: [ {msg: 'User already exists' }] });
        }

        // Instantiate a new user
        user = new User({
            userName,
            password
        });

        // Creates salt with 10 rounds(recommended)
        const salt = await bcrypt.genSalt(10);

        // bcyrpt hash passwords
        user.password = await bcrypt.hash(password, salt);

        // Save to MongoDB
        await user.save();

        const payload = {
            user: {
                // Primary key id generated by Mongo
                id: user.id
            }
        }

        // Need to manage the config path so that the jwttoken is not here see require('config')
        // expiresIn 1 hour == 3600 seconds
        jwt.sign(payload, config.get('jwtSecret'), 
        { expiresIn: 3600},
        (err, token) => {
            if(err) throw err;
            res.json({ token });
        });

        res.send('User registered');

    } catch(err) {
        console.error(err.message);
        res.status(500).send('Server error')
    }
    
    
    
});

module.exports = router;